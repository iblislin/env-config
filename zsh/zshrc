# zshrc is for interacive shell

# ==================================
# Function
# ==================================
function isLinux()
{ # {{{
	if [[ `uname -s` == 'Linux' ]]
	then
		return 0	# means true in the following script
	else
		return 1	# False
	fi
} # }}}
function isDarwin()
{ # {{{
	if [[ `uname -s` == 'Darwin' ]]
	then
		return 0	# means true in the following script
	else
		return 1	# False
	fi
} # }}}
function isExist()
{ # {{{
	# It require one argument.
	WHICH_CMD='/usr/bin/which'
	$WHICH_CMD $1 > /dev/null 2>&1
} # }}}
function sufAlias()
{ # {{{
	# It require two argument.
	# $1 for the suffix.
	# $2 for the target program.
	if ( isExist $2 )
	then
		alias -s $1=$2
	fi
} # }}}
function aa()
{
    echo '¯\_(ツ)_/¯'
}
# ==================================
# Alias
# ==================================
alias h='history 25'
alias j='jobs -l'
alias la='ls -a'
alias lf='ls -Fa'
alias ll='ls -lah'
alias ls='ls -FGI'
alias .='ls'
alias ..='cd ../'
alias rm='rm -vf'
alias cp='cp -R'
alias man='env LC_ALL=C man'
alias grep='grep --color'
alias egrep='egrep --color'
alias du='du -h'
alias df='df -h'
alias top='top -s 1'
alias mysql='mysql -u root -p --prompt="(\u@\h) [\d]>"'
alias ssh-x='ssh -c arcfour,blowfish-cbc -XC'
alias ssh-passwd='ssh -o PubkeyAuthentication=no'
alias wget='wget --no-check-certificate'
alias py='python'
alias sudo='sudo -E' # https://wiki.archlinux.org/index.php/Sudo#Passing_aliases
alias httpserver='python -m http.server'
alias l='less'
alias z='zdict'
alias m='make'

if ( isExist vim )
then
	export EDITOR=vim
	alias vi='vim -p'
	alias vim='vim -p'
else
	export EDITOR=vi
fi
if ( isExist cmdwatch )
then
	alias cmdwatch='cmdwatch -n 1'
fi

if ( isExist nload )
then
	alias nload='nload -i 102400 -o 102400'
fi
if ( isExist htop )
then
	alias top='htop -d 5'
fi
if ( isExist python3 )
then
	if ( isExist ipython3 )
	then
		alias py3=ipython3
		alias py=ipython3

		if ( isExist ptpython )
		then
			alias py=ptipython
		fi
	else
		alias py3=python3
		alias py=python3

		if ( isExist ptpython )
		then
			alias py=ptpython
		fi
	fi
fi
if ( isExist tmux )
then
	alias t='tmux -2'
	alias tmux-inner="tmux -f ~/.tmux-inner.conf -S /tmp/tmux-`id -u`-inner"
	alias ti=tmux-inner
	alias r='tmux attach -d'

    # ti with new socket, new server
    function tin()
    {
        local i=1
        local f="/tmp/tmux-`id -u`-inner-$i"
        if [[ -e $f ]]
        then
            i=`expr $i + 1`
            f="/tmp/tmux-`id -u`-inner-$i"
        fi
        exec tmux -f ~/.tmux-inner.conf -S $f
    }
fi
if ( isExist cmdwatch && isExist figlet )
then
	alias clock="cmdwatch 'date \"+%H : %M : %S\" | figlet -m 10'"
fi
if ( isExist npm )
then
	alias npm="CFLAGS='-I/usr/local/include -L/usr/local/lib' npm"
fi
if ( isExist irssi )
then
	alias irssi="TERM=xterm irssi"
fi
if ( isExist git )
then
    alias g="git"
fi
if ( isExist mutt )
then
    alias mutt='TERM=xterm-256color mutt'
fi
if ( isExist julia )
then
    alias j="julia"
fi
if ( isExist gpg )
then
    export GPG_TTY=$(tty)
fi
if ( isExist drive )
then
    alias d="drive"
fi
if ( isExist rebar3 )
then
    alias r3="rebar3"
fi
if ( isExist swapinfo )
then
    alias swapinfo='swapinfo -h'
fi
# ==================================
# Alias > Global Aliases
# ==================================
alias -g G='| egrep'
alias -g W='| wc -l'
alias -g L='| less'
# ==================================
# Alias > Suffix Aliases
# ==================================
suf_editor=(c cpp h hpp html css vue)
for i in $suf_editor
do
	alias -s $i=$EDITOR
done

sufAlias py python
# ==================================
# Alias > Hook for Linux
# ==================================
if isLinux
then
	alias ls='ls --color -F'
	alias watch='watch -n 0.5'

	if ( ! isExist htop )
	then
		alias top='top -d 0.5'
	fi

	if (isExist yaourt)
	then
		alias yu='yaourt -S --noconfirm --needed'
	fi
fi
# ==================================
# Alias > Hook for Darwin
# ==================================
if isDarwin
then
	alias ls='ls -FG'
fi
# ==================================
# Bindkey
# ==================================
bindkey -v
bindkey '^A'	beginning-of-line
bindkey '^E'	end-of-line
bindkey '^[[A'	up-line-or-search
bindkey '^[OA'	up-line-or-search               # For gnome terminal
bindkey '^K'    up-line-or-search
bindkey '^[[B'	down-line-or-search
bindkey '^[OB'	down-line-or-search             # For gnome terminal
bindkey '^J'	down-line-or-search
bindkey -M viins '^R'	history-incremental-pattern-search-backward
bindkey -M viins '^F'	history-incremental-pattern-search-forward
bindkey -M vicmd '/'	history-incremental-pattern-search-backward
bindkey -M vicmd '?'	history-incremental-pattern-search-forward
bindkey '^[[1;3C'   forward-word
bindkey '^[[1;5C'   forward-word
bindkey '^[^[[C'    forward-word
bindkey '^[k'       forward-word
bindkey '^[[1;3D'   backward-word
bindkey '^[^[[D'    backward-word
bindkey '^[j'       backward-word
bindkey '\e.'       insert-last-word
bindkey '^[.'       insert-last-word
bindkey -M menuselect '^[[Z'	reverse-menu-complete
# For solving some problematic bindkey
# http://unix.stackexchange.com/questions/140770/how-can-i-get-back-into-normal-edit-mode-after-pressing-esc-in-zsh-vi-mode
zle -A kill-whole-line vi-kill-line
# zle -A backward-kill-word vi-backward-kill-word
zle -A backward-delete-char vi-backward-delete-char
# ==================================
# Misc ( generated by zsh-newuser-install )
# ==================================
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
# ==================================
# Completion setting
# ==================================
fpath=($ZSH/repo/zsh-completions/src $fpath $ZSH/repo/zdict.sh)

autoload -Uz compinit
compinit -u

zstyle ':completion:*' menu select=2
zstyle ':completion:*' verbose yes
zstyle ':completion:*:default' list-colors $ZLS_COLORS
zstyle ':completion:*:descriptions' format "$fg[yellow]%B--- %d%b"
zstyle ':completion:*:urls' urls ~/.zsh/urls
zstyle ':completion:*:*:vim:*:*files' ignored-patterns '*.(o|beam|py[co])'

compdef mosh=ssh

# pip zsh completion start
# generate by $ pip completion --zsh
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip
# pip zsh completion end

# ==================================
# jails shell
# ==================================
if [[ `echo $STY | cut -d'.' -f 2 | cut -d'_' -f 2` = 'jail' ]]
then
	local vm=`echo $STY | cut -d'.' -f 2 | cut -d'_' -f 1`
	local run="sudo jexec $vm"
	if $run which zsh > /dev/null
	then
		local shell='zsh'
	else
		local shell='tcsh'
	fi
	exec sudo JSTY=$STY jexec $vm $shell
fi

# ==================================
# python venv dispatcher
# ==================================

if [ $TMUX ]
then
	export TERM='rxvt-256color'
	export TMUX_SESSION=`tmux display-message -p '#S'`

	function tmux_sess_prefix() {
		# grep tmux session without _venv suffix
		local patterns='_v _venv _vhost _c _code _ws _p'

		for patt in $patterns
		do
			if [ `echo $TMUX_SESSION | grep "${patt}\$"` ]
			then
				echo $TMUX_SESSION | sed -e "s/${patt}$//"
			fi
		done
	}

	function tmux_sess_route() {
		local dir=1
		local session_name=`tmux_sess_prefix`

		if [ ! $session_name ]
		then
			return 0
		fi

		for _path in "$HOME/git" "$HOME/code" "$HOME/.julia/dev" "$HOME/www" "$HOME/ws" "$HOME/ports"
		do
			if [ -d ${_path}/${session_name} ]
			then
				break
			fi
		done

		echo ${_path}/${session_name}
	}

	function jail_attach() {
		if [ `sudo jexec $vm which zsh` ]
		then
			env sudo jexec $vm zsh
			return
		fi

		env sudo jexec $vm tcsh
	}

	if [ `echo $TMUX_SESSION | egrep '_jail$'` ]
	then
		vm=`echo $TMUX_SESSION | sed -e 's/_jail$//'`
		exec jail_attach
	fi

    # select venv dir: py36 first, py35, py3
    _VENV_BASE="$HOME/venv"
    _VENV_DIR=${_VENV_BASE}/py3
    for i in 'py37' 'py36' 'py35'
    do
        if [ -d ${_VENV_BASE}/${i} ]
        then
            _VENV_DIR=${_VENV_BASE}/${i}
            break
        fi
    done

    source ${_VENV_BASE}/`tmux_sess_prefix`/bin/activate >& /dev/null || {
		source ${_VENV_DIR}/bin/activate >& /dev/null
	}


    if [[ -n $_CODE_DIR ]]
    then
        cd ${_CODE_DIR}
    else
        cd `tmux_sess_route` >& /dev/null
    fi

fi


# ==================================
# Hook Functions
# ==================================
_change_tab_title() { # for screen and tmux
	if ( ! isExist python )
	then
		return
	fi
	python -O $ZSH/bin/tab.py $1
}

_clean_tab_title() {
	if [ $? -ne 0 ]
	then
		echo -n -e '\033k\b\033\\'
	fi
}

autoload -Uz  add-zsh-hook

if [ $STY ] || [ $JSTY ]
then
	add-zsh-hook preexec _change_tab_title
	add-zsh-hook precmd _clean_tab_title
fi

# ==================================
# Plugins
# ==================================

# zsh syntax highlight
unalias .
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
source $ZSH/repo/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_STYLES[command]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[precommand]='fg=green,bold,underline'
ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[alias]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=yellow,bold'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=yellow,bold'
ZSH_HIGHLIGHT_STYLES[function]='fg=green,bold'
alias .=ls


# ==================================
# Custom setting
# ==================================
if [[ -f $HOME/.zshlocal ]]
then
	source $HOME/.zshlocal
fi
